worker_processes 1;


events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;  # Include the mime.types file
    default_type  application/octet-stream;
    limit_req_zone $binary_remote_addr zone=bots:10m rate=3r/s;


   # Map to handle URL-decoding and domain stripping
    map $arg_query $decoded_query {
        default "";
        "~^https?%3A%2F%2F[^%]+%2F(?<path>.*)$" /$path;
    }

    server {
        listen 80;
        server_name home.$DOMAIN;

        root /usr/share/nginx/html;

        location / {
            if ($arg_query) {
                return 301 https://cleaner.home.$DOMAIN$decoded_query;
            }
        }
    }

    server {
        listen 80;
        server_name cleaner.home.$DOMAIN;

        location / {
            rewrite (.*)%2F(.*) $1/$2 last;

            return 301 https://$DOMAIN$uri;

        }
    }


    
    server {
        listen 80;
        server_name $DOMAIN;

        location = /robots.txt {
            root /usr/share/nginx/html;
            allow all;
        }

        location = /sitemap.xml {
            root /usr/share/nginx/html;
            allow all;
        }

        location / {
            # Apply the rate limit defined in the 'bots' zone
            limit_req zone=bots burst=20 nodelay;
            
            # Set custom status code for rate-limited requests
            limit_req_status 429;
            
            proxy_pass https://$PROXY_DOMAIN;
            proxy_set_header Host $PROXY_DOMAIN;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header Cookie '$COOKIE';

            proxy_ssl_server_name on;
            proxy_ssl_name $PROXY_DOMAIN;

            proxy_set_header Accept-Encoding "";

            # Substitutions Filter Module usage
            subs_filter 'https://$PROXY_DOMAIN' 'https://$DOMAIN' gi;
            subs_filter '//$PROXY_DOMAIN' 'https://$DOMAIN' gi;
            subs_filter '<section\s+class="User"[^>]*>.*?<\/section>' '' ir;
            subs_filter '<li\s+class="Nav__item js-burger-to-show"[^>]*>.*?<\/li>' '' ir;
            subs_filter '<section\s+class="header__wrap header__wrap--account"[^>]*>.*?<\/section>' '' ir;

            #subs_filter_once off;

            proxy_buffering off;

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";

            proxy_hide_header content-security-policy;

            add_header Content-Security-Policy "default-src 'self'; img-src 'self' http: data: https: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' http:; style-src * 'unsafe-inline';";

            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
                return 204;
            }

            add_header Cache-Control no-cache;
        }
    }
}
